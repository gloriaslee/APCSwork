// Great, Nice Jingles: Julia Kozak, Gloria Lee, Nafiz Labib (Flopsy, Flounder, Martha)
// APCS pd08
// HW63: Read, Review, Expand
// 2022-02-10
// time spent:1 hr

Activity 1

1.
  a. Method signature: sentimentVal( String word )
  b. Yes, this method requires a parameter of type String.
      If you pass a different type of parameter, you will get an incompatible type
      error while compiling.
  c. The method returnsi a value of type double.

2. absurd -1.23
   abundant 0.83
   acclaimed 0.49
   oogawooga 0.0

3.
  a. Will compile because the input param is a String and it returns double,
      which is the same type as the new var num.
  b. Will not compile because the input param is not a String and the method
      returns a double, not a String, so the new var word is of the incorrect type
  c. Will not compile because the method only takes one parameter of type String, not two.


Activity 2

4. totalSentiment creates a String array of all the words in the review excluding spaces and
    iterating through all elements in the array, all punctuation is removed from each word
    and the sentiment value of that word is calculated and added to the total sentiment value.
5. a. The ratings make sense because based on the positive or negative words in each review,
    the numbers generated were accurately reflective of the sentiment of the review. However,
    total Sentiment is also dependent on the length of the review as well, so short but positive reviews
    will still mistakenly get low scores.
   b. One way to return more reasonable ratings would be to also take punctuation such as ! to act as
    a multiplier effect on the current total value. Another way would be to take the average sentiment
    instead of total sentiment because this would remove dependence on review length for good reviews.
6. The student's logical error is that they ordered their boolean statements incorrectly so that now, the
    first if boolean is all encompassing for all the other booleans that are checked for after the first one,
    meaning those booleans will never be reached. To fix this, the student can just reverse the order of their if statements
    with the more specific ones first and the more broad ones last.

Activity 3

3. indexOf returns the index of the first occurrence of the input and returns -1 if it cannot be found within the String or array.
    substring returns the values at the index interval specified by the input parameters with the first input being inclusive as the start index
    and the second exclusive as the end index.
    These methods can be used to divide an existing string into two parts by first finding the index i of
    where you want to cut the string in half at and taking the substring from index 0 to i as one string and
    index i to the length of the whole string as the other substring.
    It is necessary to add one to the position of the space when copying the remainder of the string because you want to
    start the copied substring at the index next to the space and not the space itself.
5. In order to call a non static method, you must first create an instance of the class that the method falls under. On the other hand,
   to call a static method, you don't need to first create an instance of its class. A static method can only access methods if they are also
   static, while a non static method can access both static and non static methods.
6. fakeReview can be modified so that instead of only using random adjectives, it can create reviews that are either positive or negative
   using only random adjectives from either the positive or negative adjective lists. It can also not change adjectives if they are already
   positive or negative depending on the sentiment value.

Activity 4

1. One reason to autogenerate a negative review would be to spam review pages with negative reviews in a way that the reviews
    are not marked as spam.
2. One reason to autogenerate a positive review would be to artificially boost the product's ratings.
3. To create a stronger review, go through each adjective marked with * using a for loop that loops through the entire String array and
    depending on the sentimentVal of the adjective and whether or not you want a positive or a negative strong review, change that adjective
    to a more positive or negative one. If the sentimentVal matches the positive or negative tone you want, don't change the adjective.
5. The result is neWord (the original string without the first character)
6. This was necessary because adjectives are checked for sentimentValue using the .csv file, which doesn't contain words with * before each one,
    so if we don't remove the *, all sentimentVals will return 0
7. Instead of randomly using positive words, we can limit it to only choosing words with sentiment values of 1 or above.

ACTIVITY 5
1. It's interactive and implements a lot of the ideas from the lab activities. Also, Hangman is a pretty nice and simple game to try out.
2. We planned out what methods we would need for each step, such as assigning a random word or processing a guess, and built each method
   one by one and testing it with print statements.
3. static boolean checkInput(String s) {
  - This method takes a String that is whatever is input by the user, since the user will input either a letter or a guess. Since it wants
  to ensure that the input is valid, it checks the length to make sure it is either a single character (length 1)
  or a guess (length of the phrase). It is static because the methods are each being called in main independent of an instance, so it would
  throw errors otherwise.
4. static void checkWin(String s) {
    if (s.toLowerCase().equals(guess.toLowerCase().substring(0, guess.length()-1))) {
      win = true;
    }
  }
  - toLowerCase(), equals(), substring(), and length() are being called here. toLowerCase() is returning each String involved in its lowercase form, so guesses aren't case sensitive. equals()
5. One code segment that uses nested conditional statements or compound boolean expressions:

    static boolean checkInput(String s) {
      if (s.length() == 1 || s.length() == display.length()-1) {
       return true;
      } else {
      return false;
      }
    }

    Compound boolean expressions are used here. Another way to write this code to achieve the same result would be:

    static boolean checkInput(String s) {
      if(s.length == 1){
        return true;
      } else if( s.length() == display.length()-1) {
        return true;
      } else{
        return false;
      }
    }

6. One code segment that uses iteration:

static void updateDisplayChar(String s) {
    for (int i=0; i<display.length()-1; i++) {
      if (guess.toLowerCase().substring(i, i+1).equals(s)) {
        display = display.substring(0, i) + guess.substring(i, i+1) + display.substring(i+1);
      }
    }
  }

  This is a for loop that goes through each letter of your guess statement. Any letter that is correct will be part of the returned String display that appears on screen.

  Another way to write this using another type of loop would be:


  static void updateDisplayChar(String s){
    int i = 0;
    while(i<display.length()-1){
      if (guess.toLowerCase().substring(i, i+1).equals(s)) {
        display = display.substring(0, i) + guess.substring(i, i+1) + display.substring(i+1);
      }
      i++;
    }
  }
