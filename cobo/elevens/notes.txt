/*
TNPG: BrainForked (Gloria Lee, John Gupta-She, Jack Chen)
APCS pd 08
HW -- lab07
2022-03-19
time spent: 3 hrs
*/

QCC:
- any way to make this code more effishient?
- how does java's GUI work?
- when is using interface preferable to using abstract and vice versa?

DISCO:
- abstract != interface. abstract is for general functionality while interface is more of an outline to follow.
- shallow vs deep copy. when we tried to make shallow copies of arrays, the original array never changed.
- it's sometimes useful to hide functionality and not to present all functionality to the user, such as when
  checking for 11sum or jqk combo was hidden within isLegal

____________________________________________________________________________
Activity 2 Questions:

1) A deck is a list that contains cards objects.
2) Deck d contains 6 cards (length of ranks x length of suits)
3)
   String[] ranks = {"Ace", "King", "Queen", "Judge", "10", "9", "8", "7", "6", "5", "4", "3", "2"};
   String[] suits = {"Spades", "Hearts", "Diamonds", "Clubs"};
   String[] pointValues = {11,10, 10, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2 };
    Deck twentyOnePilots = new Deck(ranks, suits, pointValues);


4) Yes. The order of elements in ranks and suits matter because an element of ranks
    must always match up with the element at the same index of suits. ranks[i] matches to suits[i]

____________________________________________________________________________
Activity 3 Questions:

1)  static String flip(){
        String[] face = ["tails", "heads", "heads"];
        int returned = (int)(Math.random()*3);
        return face[returned];
        }

2)  static boolean arcPermutations(int[] a, int[] b){
          boolean returned = false;
          for(int i = 0; i < a.length ; i++){
            returned = false;
            for(int j = 0; j < b.length ; b++){
              if(a[i] == b[i]){returned = true;}
            }
            if(returned == false){
              return false;
            }
          }
  }

3)  First, the random int r to be chosen would be 0, then, 1.
____________________________________________________________________________
  Activity 6 Questions
  
  1) All possible plays for the board:
    - remove the 5 of clubs and 6 of spades. 
    - remove the 5 of spades and 6 of spades.
  
  2)The cards must be a JQK because there are no other methods to remove a Jack, Queen, or King other than
    removing them with each other.
    
  3) This game does not involve strategy because no distinction is made between different card suits,
      meaning that when deciding between choosing a five of spades or hearts for example, there is no difference/benefit
      to choosing one over the other.
____________________________________________________________________________
  Activity 7 Questions

1) Card[] cards, Deck deck, String[] ranks, String[] suits, String[] point value, int boardsize

2) Use three for loops nested within each other, each iterating through Card[] cards once.
    If cards[i]'s point value + card[j]'s point value is found to add up to eleven, remove the two cards
    and randomly deal two more cards to add to Card[] cards.
    Or if cards[i] cards[j] and cards[k] are JQK, remove the three and randomly deal three more cards.
    If the three for loops reach their end,
    no more possible plays.

3) Yes, it contains a properly set up Card [] cards and a properly set up deck. Once cards are dealt,
    the cards array will be properly filled with randomly dealt cards from deck to a specified size.
    There also already are spaces to write implementation of detecting if there is a sum 11 pair, JQK trio and
    there is detection of whether or not game is won, there is still a further move, move is legal etc.

4a) dealMyCards in implemented in the constructor
4b) isLegal and anotherPlayIsPossible should implement containsPairSum11 and containsJQK
4c) Returned list: {0, 1, 3, 6, 7}
4d) public static void printCards(ElevensBoard Board) {
        List<Integer> cIndexes = board.cardIndexes();
        String s;
        for (Integer index : cIndexes) {
          s += board.get(cIndexes);
        }
        System.out.println(s);
}
4e) the isLegal method since it needs to check if what the player selected is a valid index

____________________________________________________________________________
Activity 8 Questions

1) Thirteens uses a 10 card board, Elevens uses a 9 card board, Tens uses a 13 card board.
   Thirteens pairs add up to 13, Elevens pairs add up to 11, Tens pairs add up to 10.
   In Thirteens, kings are removed singly. In Tens, quartets of K, Q, J, and 10 are removed at once.

2) The exact mechanism is that through the written constructors for cards and deck, the deck is already initialized
    using the ranks, suits, and pointValues arrays that were already previously specified as instance vars to ElevensBoard.
    The Board instance vars get initialized using input in the board constructor used to set the instance vars cards and deck as
    opposed to ElevensBoard where instance vars were initialized according to other instance vars arrays.

3) isLegal and anotherPlayIsPossible are abstract methods because they are specific to each game and therefore do not have implementations in Board.
____________________________________________________________________________
Activity 9 Questions

1) size is not an abstract method because the two implementations of size between Elevens and Thirteens are only accessed through cards.size(). Size is also
    individual to both Elevens and Thirteens and is passed on to the constructor for a board.

2) This is because the implementation of removal or replacement of cards is individual to Elevens and Thirteens and both are already covered by isLegal,
    so there would be no need for the Board to need to access removal/replacement of cards.

3) Yes, the new scheme would allow the Elevens GUI to call isLegal and anotherPlayIsPossible polymorphically because
  the ElevensBoard.java code does not change the return type or the input type of these methods. However, this alternate design
  would not work as well as the abstract Board class design because the abstract Board class allows for the same kind of nonspecific
  code implementation for all kinds of board types, giving the user to specify/override different functionality if needed depending on specific board type.
